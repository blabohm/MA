paste0("lvp_outline.gpkg") %>%
read_sf() %>%
st_union() %>%
st_cast("MULTILINESTRING", warn = FALSE)
n <-  (st_length(lvp_outline) / 5) %>% round() %>% as.numeric()
# BLEND NEW PARK ENTRIES INTO NETWORK
new_gse <- lvp_outline %>%
st_sample(size = n, type = "regular") %>%
st_cast("POINT") %>%
st_as_sf() %>%
mutate(area = gs$area) %>%
rename(geom = x)
#write_sf(new_gse, paste0(wd, "new_gse.gpkg"))
sf_net <- edges %>%
read_sf(wkt_filter = lvp_filter) %>%
as_sfnetwork() %>%
convert(to_undirected) %>%
st_network_blend(new_gse)
#write_sf(st_as_sf(activate(sf_net, "edges")), paste0(wd, "edges_new.gpkg"))
#write_sf(st_as_sf(activate(sf_net, "nodes")), paste0(wd, "nodes_new.gpkg"))
net <- sf_net %>%
activate("edges") %>%
st_as_sf()
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0)
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "scenario1/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir,
output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir,
output_dir = paste0(out_dir, "ls.gpkg"))
# Scenario 1 - Unlimited access
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes_new.gpkg")
edges <- paste0(wd, "edges_new.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# REPLACE PARK ENTRIES WITH BUILDING ENTRIES
target_ids <- c("23502-DE008L2", "23493-DE008L2", "23485-DE008L2")
target_query <- paste0("SELECT * FROM nodes WHERE identifier = '",
target_ids, "'")
for(q in target_query) { tmp <- read_sf(nodes, query = q)
if (q == first(target_query)) target_gs <- tmp else target_gs <- bind_rows(target_gs, tmp) }
ua_dir <- "Z:/input/UA2018/DE008L2_LEIPZIG_UA2018_v013/Data/DE008L2_LEIPZIG_UA2018_v013.gpkg"
ua_lyr <-  st_layers(ua_dir)$name[1]
pop_query <- paste0("SELECT Pop2018, area FROM ", ua_lyr, " WHERE code_2018 = 11100")
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
hd_pop <- hd_pop %>%
mutate(pop_per_m = Pop2018 / area)
pop_per_m_95 <- quantile(hd_pop$pop_per_m, probs = .95)
new_building_entries <- target_gs %>%
group_by(identifier) %>%
mutate(population = round(area * pop_per_m_95 / n()),
ID = identifier,
area = NA,
identifier = NA)
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0) %>%
bind_rows(new_building_entries)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area),
!(identifier %in% target_ids))
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "scenario2/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir,
output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir,
output_dir = paste0(out_dir, "ls.gpkg"))
nodes
edges
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes_new WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
# ACTUAL PARK ENTRIES
#lvp_query <- paste0("SELECT * FROM nodes_new WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes#, query = lvp_query
)
lvp_entries
# Scenario 1 - Unlimited access
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# PARK ENTRIES EVERY 2M
gs_dir <- paste0(wd, "DE008L2_LEIPZIG_UA2018_v012.gpkg")
gsq <- paste0("SELECT area, geom FROM ",  st_layers(gs_dir)$name[1],
" WHERE identifier LIKE '", id, "'")
gs <- read_sf(gs_dir, query = gsq)
lvp_outline <- wd %>%
paste0("lvp_outline.gpkg") %>%
read_sf() %>%
st_union() %>%
st_cast("MULTILINESTRING", warn = FALSE)
n <-  (st_length(lvp_outline) / 5) %>% round() %>% as.numeric()
# BLEND NEW PARK ENTRIES INTO NETWORK
new_gse <- lvp_outline %>%
st_sample(size = n, type = "regular") %>%
st_cast("POINT") %>%
st_as_sf() %>%
mutate(area = gs$area) %>%
rename(geom = x)
sf_net <- edges %>%
read_sf(wkt_filter = lvp_filter) %>%
as_sfnetwork() %>%
convert(to_undirected) %>%
st_network_blend(new_gse)
nodes
lvp_entries
# Scenario 1 - Unlimited access
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges_new.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes_new WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes#, query = lvp_query
)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# REPLACE PARK ENTRIES WITH BUILDING ENTRIES
target_ids <- c("23502-DE008L2", "23493-DE008L2", "23485-DE008L2")
target_query <- paste0("SELECT * FROM nodes_new WHERE identifier = '",
target_ids, "'")
for(q in target_query) { tmp <- read_sf(nodes, query = q)
if (q == first(target_query)) target_gs <- tmp else target_gs <- bind_rows(target_gs, tmp) }
target_query
target_query <- paste0("SELECT * FROM nodes WHERE identifier = '",
target_ids, "'")
for(q in target_query) { tmp <- read_sf(nodes, query = q)
if (q == first(target_query)) target_gs <- tmp else target_gs <- bind_rows(target_gs, tmp) }
ua_dir <- "Z:/input/UA2018/DE008L2_LEIPZIG_UA2018_v013/Data/DE008L2_LEIPZIG_UA2018_v013.gpkg"
ua_lyr <-  st_layers(ua_dir)$name[1]
pop_query <- paste0("SELECT Pop2018, area FROM ", ua_lyr, " WHERE code_2018 = 11100")
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# REPLACE PARK ENTRIES WITH BUILDING ENTRIES
target_ids <- c("23502-DE008L2", "23493-DE008L2", "23485-DE008L2")
target_query <- paste0("SELECT * FROM nodes WHERE identifier = '",
target_ids, "'")
for(q in target_query) { tmp <- read_sf(nodes, query = q)
if (q == first(target_query)) target_gs <- tmp else target_gs <- bind_rows(target_gs, tmp) }
ua_dir <- "Z:/input/UA2018/DE008L2_LEIPZIG_UA2018_v013/Data/DE008L2_LEIPZIG_UA2018_v013.gpkg"
ua_lyr <-  st_layers(ua_dir)$name[1]
pop_query <- paste0("SELECT Pop2018, area FROM ", ua_lyr, " WHERE code_2018 = 11100")
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
hd_pop
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter, query = pop_query, quiet = TRUE)
hd_pop <- ua_dir %>%
read_sf(wkt_filter = lvp_filter, query = pop_query) %>%
mutate(pop_per_m = Pop2018 / area)
pop_per_m_95 <- quantile(hd_pop$pop_per_m, probs = .95)
pop_per_m_95
new_building_entries <- target_gs %>%
group_by(identifier) %>%
mutate(population = round(area * pop_per_m_95 / n()),
ID = identifier,
area = NA,
identifier = NA)
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0) %>%
bind_rows(new_building_entries)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area),
!(identifier %in% target_ids))
net
net <- edges %>%
read_sf(wkt_filter = lvp_filter) %>%
as_sfnetwork() %>%
convert(to_undirected) %>%
activate("edges") %>%
st_as_sf()
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "scenario2/")
dir.create(out_dir)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir,
output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir,
output_dir = paste0(out_dir, "ls.gpkg"))
# Scenario 3 - Population increase
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
library(stringr)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "D:/output/DE008/"
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges_new.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# REPLACE PARK ENTRIES WITH BUILDING ENTRIES
ua_dir <- paste0(wd, "DE008L2_LEIPZIG_UA2018_v013.gpkg")
ua_lyr <-  st_layers(ua_dir)$name[1]
ua_pop <- read_sf(ua_dir, wkt_filter = lvp_filter, layer = ua_lyr) %>%
filter(grepl("^11",  code_2018)) %>%
st_drop_geometry()
hd_pop <- ua_pop %>%
mutate(pop_per_m = Pop2018 / area) %>%
group_by(code_2018) %>%
summarise(pop_high = quantile(pop_per_m, .95))
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0) %>%
select(-c(area)) %>%
mutate(identifier = str_extract(ID, ".*L2")) %>%
left_join(ua_pop) %>%
left_join(hd_pop) %>%
mutate(Pop2018_new = area * pop_high,
population_new = round(population / Pop2018 * Pop2018_new)) %>%
transmute(identifier = NA,
area = NA,
population = population_new,
ID,
geom)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area))
net <- read_sf(edges, wkt_filter = lvp_filter)
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "scenario3/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir, output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir, output_dir = paste0(out_dir, "ls.gpkg"))
# Scenario 3 - Population increase
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
library(stringr)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes_new.gpkg")
edges <- paste0(wd, "edges.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area))
net <- read_sf(edges, wkt_filter = lvp_filter)
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "base_indices/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier)) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir, output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir, output_dir = paste0(out_dir, "ls.gpkg"))
# Scenario 3 - Population increase
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
library(stringr)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges_new.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area))
net <- read_sf(edges, wkt_filter = lvp_filter)
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "base_indices/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier)) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir, output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir, output_dir = paste0(out_dir, "ls.gpkg"))
warnings()
gs_ids
net <- read_sf(edges, wkt_filter = lvp_filter)
net1 <- read_sf(edges)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# PARK ENTRIES EVERY 2M
gs_dir <- paste0(wd, "DE008L2_LEIPZIG_UA2018_v012.gpkg")
gsq <- paste0("SELECT area, geom FROM ",  st_layers(gs_dir)$name[1],
" WHERE identifier LIKE '", id, "'")
gs <- read_sf(gs_dir, query = gsq)
lvp_outline <- wd %>%
paste0("lvp_outline.gpkg") %>%
read_sf() %>%
st_union() %>%
st_cast("MULTILINESTRING", warn = FALSE)
n <-  (st_length(lvp_outline) / 5) %>% round() %>% as.numeric()
# BLEND NEW PARK ENTRIES INTO NETWORK
new_gse <- lvp_outline %>%
st_sample(size = n, type = "regular") %>%
st_cast("POINT") %>%
st_as_sf() %>%
mutate(area = gs$area) %>%
rename(geom = x)
sf_net <- edges %>%
read_sf(wkt_filter = lvp_filter) %>%
as_sfnetwork() %>%
convert(to_undirected) %>%
st_network_blend(new_gse)
net <- sf_net %>%
activate("edges") %>%
st_as_sf()
flist
gs_ids
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
gs_ids
flist
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
flist
# rename_cols
# bind_cols
# scenario_cols - base_index_cols
base_indices <- paste0(wd, "base_indices")
library(dplyr)
library(sf)
library(ggplot2)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
# rename_cols
# bind_cols
# scenario_cols - base_index_cols
base_indices <- paste0(wd, "base_indices")
base_indices
scenarios <- list.files(wd, pattern = "scenario", full.names = TRUE)
scenarios
paste0(scenarios, "ls.gpkg")
base_di <- read_sf(paste0(base_indices, "di.gpkg"))
base_di <- read_sf(paste0(base_indices, "/di.gpkg"))
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg"))
base_ls
plot(base_ls)
base_di
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>% rename(di = base_di)
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>% rename(base_di = di)
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg")) %>% rename(base_ls = ls)
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>% rename(base_di = di) %>%
na.omit()
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg")) %>% rename(base_ls = ls) %>%
na.omit()
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>%
rename(base_di = di) %>% na.omit() %>% st_drop_geometry()
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg")) %>%
rename(base_ls = ls) %>% na.omit() %>% st_drop_geometry()
for (scenario in scenarios) {
read_sf(paste0(scenario, "/di.gpkg")) %>% na.omit() %>%
left_join(base_di) %>% mutate(delta_di = di - base_di) %>%
write_sf(paste0(scenario, "/delta_di.gpkg"))
read_sf(paste0(scenario, "/ls.gpkg")) %>%
na.omit() %>% left_join(base_ls) %>% mutate(delta_ls = ls - base_ls) %>%
write_sf(paste0(scenario, "delta_ls.gpkg"))
}

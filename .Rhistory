list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges_new.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes_new WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes#, query = lvp_query
)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# REPLACE PARK ENTRIES WITH BUILDING ENTRIES
target_ids <- c("23502-DE008L2", "23493-DE008L2", "23485-DE008L2")
target_query <- paste0("SELECT * FROM nodes_new WHERE identifier = '",
target_ids, "'")
for(q in target_query) { tmp <- read_sf(nodes, query = q)
if (q == first(target_query)) target_gs <- tmp else target_gs <- bind_rows(target_gs, tmp) }
target_query
target_query <- paste0("SELECT * FROM nodes WHERE identifier = '",
target_ids, "'")
for(q in target_query) { tmp <- read_sf(nodes, query = q)
if (q == first(target_query)) target_gs <- tmp else target_gs <- bind_rows(target_gs, tmp) }
ua_dir <- "Z:/input/UA2018/DE008L2_LEIPZIG_UA2018_v013/Data/DE008L2_LEIPZIG_UA2018_v013.gpkg"
ua_lyr <-  st_layers(ua_dir)$name[1]
pop_query <- paste0("SELECT Pop2018, area FROM ", ua_lyr, " WHERE code_2018 = 11100")
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# REPLACE PARK ENTRIES WITH BUILDING ENTRIES
target_ids <- c("23502-DE008L2", "23493-DE008L2", "23485-DE008L2")
target_query <- paste0("SELECT * FROM nodes WHERE identifier = '",
target_ids, "'")
for(q in target_query) { tmp <- read_sf(nodes, query = q)
if (q == first(target_query)) target_gs <- tmp else target_gs <- bind_rows(target_gs, tmp) }
ua_dir <- "Z:/input/UA2018/DE008L2_LEIPZIG_UA2018_v013/Data/DE008L2_LEIPZIG_UA2018_v013.gpkg"
ua_lyr <-  st_layers(ua_dir)$name[1]
pop_query <- paste0("SELECT Pop2018, area FROM ", ua_lyr, " WHERE code_2018 = 11100")
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter,
query = pop_query)
hd_pop
hd_pop <- read_sf(ua_dir, wkt_filter = lvp_filter, query = pop_query, quiet = TRUE)
hd_pop <- ua_dir %>%
read_sf(wkt_filter = lvp_filter, query = pop_query) %>%
mutate(pop_per_m = Pop2018 / area)
pop_per_m_95 <- quantile(hd_pop$pop_per_m, probs = .95)
pop_per_m_95
new_building_entries <- target_gs %>%
group_by(identifier) %>%
mutate(population = round(area * pop_per_m_95 / n()),
ID = identifier,
area = NA,
identifier = NA)
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0) %>%
bind_rows(new_building_entries)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area),
!(identifier %in% target_ids))
net
net <- edges %>%
read_sf(wkt_filter = lvp_filter) %>%
as_sfnetwork() %>%
convert(to_undirected) %>%
activate("edges") %>%
st_as_sf()
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "scenario2/")
dir.create(out_dir)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir,
output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir,
output_dir = paste0(out_dir, "ls.gpkg"))
# Scenario 3 - Population increase
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
library(stringr)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "D:/output/DE008/"
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges_new.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# REPLACE PARK ENTRIES WITH BUILDING ENTRIES
ua_dir <- paste0(wd, "DE008L2_LEIPZIG_UA2018_v013.gpkg")
ua_lyr <-  st_layers(ua_dir)$name[1]
ua_pop <- read_sf(ua_dir, wkt_filter = lvp_filter, layer = ua_lyr) %>%
filter(grepl("^11",  code_2018)) %>%
st_drop_geometry()
hd_pop <- ua_pop %>%
mutate(pop_per_m = Pop2018 / area) %>%
group_by(code_2018) %>%
summarise(pop_high = quantile(pop_per_m, .95))
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0) %>%
select(-c(area)) %>%
mutate(identifier = str_extract(ID, ".*L2")) %>%
left_join(ua_pop) %>%
left_join(hd_pop) %>%
mutate(Pop2018_new = area * pop_high,
population_new = round(population / Pop2018 * Pop2018_new)) %>%
transmute(identifier = NA,
area = NA,
population = population_new,
ID,
geom)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area))
net <- read_sf(edges, wkt_filter = lvp_filter)
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "scenario3/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir, output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir, output_dir = paste0(out_dir, "ls.gpkg"))
# Scenario 3 - Population increase
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
library(stringr)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes_new.gpkg")
edges <- paste0(wd, "edges.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area))
net <- read_sf(edges, wkt_filter = lvp_filter)
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "base_indices/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier)) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir, output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir, output_dir = paste0(out_dir, "ls.gpkg"))
# Scenario 3 - Population increase
library(dplyr)
library(sf)
library(sfnetworks)
library(ggplot2)
library(tidygraph)
library(stringr)
getwd() %>%
paste0("/tool/Module 3 - index building/functions/") %>%
list.files(pattern = "3.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges_new.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# BLEND NEW BUILDINGS TO NETWORK
#CALC INDICES
be <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(population > 0)
new_gse <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(area))
net <- read_sf(edges, wkt_filter = lvp_filter)
out <- add_params(build_entries = be, gs_entries = new_gse, network = net)
out_dir <- paste0(wd, "base_indices/")
dir.create(out_dir)
write_output(out, network = net, out_dir = out_dir, ID = id)
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier)) %>%
pull(identifier) %>%
unique()
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
file.copy(flist, out_dir)
build_poly <- paste0(wd, "buildings.gpkg")
gatherDI(building_polygons = build_poly, index_dir = out_dir, output_dir = paste0(out_dir, "di.gpkg"))
gatherLS(edges = edges, index_dir = out_dir, output_dir = paste0(out_dir, "ls.gpkg"))
warnings()
gs_ids
net <- read_sf(edges, wkt_filter = lvp_filter)
net1 <- read_sf(edges)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
d <- 2000
nodes <- paste0(wd, "nodes.gpkg")
edges <- paste0(wd, "edges.gpkg")
# ACTUAL PARK ENTRIES
lvp_query <- paste0("SELECT * FROM nodes WHERE identifier IS '", id, "'")
lvp_entries <- read_sf(nodes, query = lvp_query)
lvp_filter <- st_buffer(lvp_entries, d) %>% st_geometry() %>% st_as_text()
# PARK ENTRIES EVERY 2M
gs_dir <- paste0(wd, "DE008L2_LEIPZIG_UA2018_v012.gpkg")
gsq <- paste0("SELECT area, geom FROM ",  st_layers(gs_dir)$name[1],
" WHERE identifier LIKE '", id, "'")
gs <- read_sf(gs_dir, query = gsq)
lvp_outline <- wd %>%
paste0("lvp_outline.gpkg") %>%
read_sf() %>%
st_union() %>%
st_cast("MULTILINESTRING", warn = FALSE)
n <-  (st_length(lvp_outline) / 5) %>% round() %>% as.numeric()
# BLEND NEW PARK ENTRIES INTO NETWORK
new_gse <- lvp_outline %>%
st_sample(size = n, type = "regular") %>%
st_cast("POINT") %>%
st_as_sf() %>%
mutate(area = gs$area) %>%
rename(geom = x)
sf_net <- edges %>%
read_sf(wkt_filter = lvp_filter) %>%
as_sfnetwork() %>%
convert(to_undirected) %>%
st_network_blend(new_gse)
net <- sf_net %>%
activate("edges") %>%
st_as_sf()
flist
gs_ids
gs_ids <- read_sf(nodes, wkt_filter = lvp_filter) %>%
filter(!is.na(identifier),
identifier != id) %>%
pull(identifier) %>%
unique()
gs_ids
flist
flist <- list.files(paste0(wd, "indices/"),
pattern = paste(gs_ids, collapse = "|"),
full.names = TRUE)
flist
# rename_cols
# bind_cols
# scenario_cols - base_index_cols
base_indices <- paste0(wd, "base_indices")
library(dplyr)
library(sf)
library(ggplot2)
wd <- "C:/Users/labohben/Desktop/DE008/"
id <- "23473-DE008L2"
# rename_cols
# bind_cols
# scenario_cols - base_index_cols
base_indices <- paste0(wd, "base_indices")
base_indices
scenarios <- list.files(wd, pattern = "scenario", full.names = TRUE)
scenarios
paste0(scenarios, "ls.gpkg")
base_di <- read_sf(paste0(base_indices, "di.gpkg"))
base_di <- read_sf(paste0(base_indices, "/di.gpkg"))
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg"))
base_ls
plot(base_ls)
base_di
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>% rename(di = base_di)
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>% rename(base_di = di)
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg")) %>% rename(base_ls = ls)
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>% rename(base_di = di) %>%
na.omit()
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg")) %>% rename(base_ls = ls) %>%
na.omit()
base_di <- read_sf(paste0(base_indices, "/di.gpkg")) %>%
rename(base_di = di) %>% na.omit() %>% st_drop_geometry()
base_ls <- read_sf(paste0(base_indices, "/ls.gpkg")) %>%
rename(base_ls = ls) %>% na.omit() %>% st_drop_geometry()
for (scenario in scenarios) {
read_sf(paste0(scenario, "/di.gpkg")) %>% na.omit() %>%
left_join(base_di) %>% mutate(delta_di = di - base_di) %>%
write_sf(paste0(scenario, "/delta_di.gpkg"))
read_sf(paste0(scenario, "/ls.gpkg")) %>%
na.omit() %>% left_join(base_ls) %>% mutate(delta_ls = ls - base_ls) %>%
write_sf(paste0(scenario, "delta_ls.gpkg"))
}
base_plot <- ggplot() +
geom_sf(data = st_buffer(st_as_sfc(bbox), 1000), fill = "gray93") +
geom_sf(data = read_sf(build_poly, wkt_filter = bbox_filter) %>% select(geom),
fill = "gray99", color = "gray99") +
geom_sf(data = gs, fill = "darkolivegreen1", color = "darkolivegreen1",
alpha = .3) +
geom_sf(data = lvp, fill = "darkolivegreen4", color = "darkolivegreen4",
alpha = .3) +
geom_sf(data = read_sf(edges, wkt_filter = bbox_filter) %>% select(geom),
color = "gray80", size = 1)
base_plot
library(ggplot2)
library(sf)
library(dplyr)
library(RColorBrewer)
library(ggspatial)
github <- "C:/Users/labohben/Documents/GitHub/MA/"
wd <- "C:/Users/labohben/Desktop/DE008/"
edges <- paste0(wd, "edges.gpkg")
id <- "23473-DE008L2"
gs_dir <- paste0(wd, "DE008L2_LEIPZIG_UA2018_v012.gpkg")
lvp_q <- paste0("SELECT area, geom FROM ",  st_layers(gs_dir)$name[1],
" WHERE identifier LIKE '", id, "'")
lvp <- read_sf(gs_dir, query = lvp_q)
gs_q <- paste0("SELECT area, geom, identifier FROM ",  st_layers(gs_dir)$name[1],
" WHERE code_2018 is 14100 OR code_2018 is 31000")
build_poly <- paste0(wd, "buildings.gpkg")
ls_values <- read_sf(paste0(wd, "scenarios/ls_values.gpkg"))
bbox <- ls_values %>% st_bbox()
bbox_filter <- bbox %>% st_as_sfc() %>% st_as_text()
xmin <- bbox[1] + 1100
xmax <- bbox[3] - 1100
ymin <- bbox[2] + 1100
ymax <- bbox[4] - 1100
gs <- read_sf(gs_dir, query = gs_q, wkt_filter = bbox_filter)
base_plot <- ggplot() +
geom_sf(data = st_buffer(st_as_sfc(bbox), 1000), fill = "gray93") +
geom_sf(data = read_sf(build_poly, wkt_filter = bbox_filter) %>% select(geom),
fill = "gray99", color = "gray99") +
geom_sf(data = gs, fill = "darkolivegreen1", color = "darkolivegreen1",
alpha = .3) +
geom_sf(data = lvp, fill = "darkolivegreen4", color = "darkolivegreen4",
alpha = .3) +
geom_sf(data = read_sf(edges, wkt_filter = bbox_filter) %>% select(geom),
color = "gray80", size = 1)
base_plot
################################################################################
ls_query <- paste0("SELECT * FROM ls WHERE ls is not null")
ls_plot <- base_plot +
ls_values %>%
select(ls) %>%
filter(!is.na(ls)) %>%
mutate(ls = log(ls)) %>%
arrange(ls) %>%
geom_sf(data = ., aes(color = ls), size = 2) +
scale_color_distiller(palette = "RdBu") +
coord_sf(xlim = c(xmin, xmax),
ylim = c(ymin, ymax)) +
labs(title = "Lene Voigt Park, Leipzig \nLocal Significance (LS)",
color = "LS") +
annotation_scale(aes(style = "ticks"))
ls_plot
install.packages("ggmap")
library(ggmap)
full_df %>%
qmplot(longitude, latitude)
qmplot(longitude, latitude, data = full_df)
library(dplyr)
library(sf)
library(readxl)
library(lubridate)
library(ggmap)
wd <- "C:/LandOeko/dagmar/"
xlsx_files <- list.files(wd, full.names = TRUE, pattern = "xlsx$")
assess_df <- read_xlsx(xlsx_files[1]) %>%
filter(StartLatitude != 0) %>%
select(matches(".*tID|.*time$|.*atitude|.*ongitude")) %>%
mutate(latitude = StartLatitude, longitude = StartLongitude,
time = ymd_hms(ActualStartTime)) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
loc_df <- read_xlsx(xlsx_files[2]) %>%
filter(latitude != 0) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mutate(time = ymd_hms(timeSubmitted))
full_df <- bind_rows(assess_df, loc_df) %>%
arrange(time, ParticipantID)
full_df %>%
select(time, ParticipantID) %>%
group_by(ParticipantID) %>%
summarise(geometry = st_combine(geometry) %>% st_cast("LINESTRING"))# %>%
write_sf(paste0(wd, "paths.gpkg"))
write_sf(full_df, paste0(wd, "merge_loc_assess.gpkg"))
full_df
qmplot(longitude, latitude, data = full_df)
qmplot(longitude, latitude, data = full_df)
full_df
assess_df <- read_xlsx(xlsx_files[1]) %>%
filter(StartLatitude != 0) %>%
select(matches(".*tID|.*time$|.*atitude|.*ongitude")) %>%
mutate(latitude = StartLatitude, longitude = StartLongitude,
time = ymd_hms(ActualStartTime)) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
assess_df
assess_df <- read_xlsx(xlsx_files[1]) %>%
filter(StartLatitude != 0) %>%
select(matches(".*tID|.*time$|.*atitude|.*ongitude")) %>%
mutate(latitude = StartLatitude, longitude = StartLongitude,
time = ymd_hms(ActualStartTime))
loc_df <- read_xlsx(xlsx_files[2]) %>%
filter(latitude != 0) %>%
#  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mutate(time = ymd_hms(timeSubmitted))
full_df <- bind_rows(assess_df, loc_df) %>%
arrange(time, ParticipantID)
qmplot(longitude, latitude, data = full_df)
qmplot(longitude, latitude, data = full_df, maptype = "toner-background") +
facet_wrap(~ ParticipantID)
qmplot(longitude, latitude, data = full_df, maptype = "toner-background") +
facet_wrap(~ ParticipantID, scales = "free")
library(dplyr)
library(officer)
library(stringi)
in_dir <- "C:/Users/labohben/Documents/GitHub/MA/text/"
file_list <- list.files(in_dir, full.names = TRUE, recursive = TRUE,
pattern = ".*docx$") %>%
tibble(files = .) %>%
filter(!(grepl("paper_frame|title|~", files))) %>%
pull(files)
str_num <- function(x) stri_length(x) - stri_count_fixed(x, " ")
do_letter_count <- function(file_list)
{
letter_count <- 0
for (docx in file_list) {
letter_count <- read_docx(docx) %>%
docx_summary() %>%
pull(text) %>%
str_num() %>%
sum() %>%
sum(., letter_count)
}
if (letter_count >= 90000) message("You have written ",
letter_count,
" letters. Congratulations!")
if (letter_count < 90000) message("You have written ",
letter_count,
" letters. Good job!")
}
do_letter_count(file_list = file_list)
do_letter_count(file_list = file_list)
file_list <- list.files(in_dir, full.names = TRUE, recursive = TRUE,
pattern = ".*docx$") %>%
tibble(files = .) %>%
filter(!(grepl("paper_frame|title|~", files))) %>%
pull(files)
str_num <- function(x) stri_length(x) - stri_count_fixed(x, " ")
do_letter_count <- function(file_list)
{
letter_count <- 0
for (docx in file_list) {
letter_count <- read_docx(docx) %>%
docx_summary() %>%
pull(text) %>%
str_num() %>%
sum() %>%
sum(., letter_count)
}
if (letter_count >= 90000) message("You have written ",
letter_count,
" letters. Congratulations!")
if (letter_count < 90000) message("You have written ",
letter_count,
" letters. Good job!")
}
do_letter_count(file_list = file_list)

#    -> 2. FROM AVERAGE POP / AREA IN TILE (IF NO POP INFO AT POLYGON)
OSMpop() %>%
# 5. ADD BUILDING ID
#    -> IDENTIFIER + NUMBER
OSMbuildID() %>%
st_write(outDir, layer = "osm_buildings", quiet = TRUE, append = TRUE)
}
out_dir %>%
return()
}
# OVERVIEW:
# 1. READ UA 2018 DATA
# 2. READ OSM BUILDING TILE
# 3. FILTER OSM BUILDINGS FOR INSIDE UA RESIDENTIAL POLYGONS
# 4. ADD POPULATION FROM URBAN ATLAS
# 5. ADD BUILDING ID
#
################################################################################
# INPUT VALUES FOR TESTING CODE
# DATA DIRECTORIES FOR UA AND OSM DATA
osmDir <-  "E:/osm_buildings/"
uaDir <- "C:/Berlin/UA2018/"
cityCode <- "DE001"
cityBound <- "E:/citiesEurope/Cities.shp"
outDir <- "C:/Berlin/buildings.gpkg"
buildingPrep <- function(osm_directory,
ua_directory,
city_code,
city_boundaries,
out_dir)
{
# LOAD PACKAGES AND FUNCTIONS
require(dplyr, quietly = TRUE)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-2[A-Za-z].*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
# Load city boundary
city_boundary <- cityBoundLoader(city_boundaries = city_boundaries,
city_code = city_code,
code_string = "URAU_CO")
# GET DIRECTORIES OF OSM FILES INSIDE UA BOUNDARY
osm_file_list <-
list.files(osm_directory, pattern = city_code, full.names = TRUE) %>%
proximity_checker(city_boundaries = city_boundaries,
city_boundary = city_boundary,
osm_file = .)
# 1. READ UA 2018 DATA
#    -> FILTER FOR RESIDENTIAL AREAS
UAresidential <- UAresLoader(ua_directory)
# 2. READ OSM BUILDING TILE
#    -> CHECK IF OSM LAYER IS INSIDE CITY BOUNDARIES
#    -> UNITE LAYERS IF NECESSARY
for(osm_file in osm_file_list$tile_dir) {
#tmpDir <- paste0(out_dir, strsplit(osm_file, "/")[[1]] %>% last())
osm_file %>%
OSMloader() %>%
# 3. FILTER OSM BUILDINGS FOR INSIDE UA RESIDENTIAL POLYGONS
OSMfilter(ua_residential = UAresidential,
city_boundary = city_boundary) %>%
# 4. ADD POPULATION FROM URBAN ATLAS
#    -> 1. FROM UA POLYGON
#    -> 2. FROM AVERAGE POP / AREA IN TILE (IF NO POP INFO AT POLYGON)
OSMpop() %>%
# 5. ADD BUILDING ID
#    -> IDENTIFIER + NUMBER
OSMbuildID() %>%
st_write(outDir, layer = "osm_buildings", quiet = TRUE, append = TRUE)
}
out_dir %>%
return()
}
buildingPrep(osm_directory = osmDir,
ua_directory = uaDir,
city_code = cityCode,
city_boundaries = cityBound,
out_dir = outDir)
View(cityBoundLoader)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-2[A-Za-z].*\\.R|2.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-2[A-Za-z].*\\.R|2.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
# OVERVIEW:
# 1. READ UA 2018 DATA
# 2. READ OSM BUILDING TILE
# 3. FILTER OSM BUILDINGS FOR INSIDE UA RESIDENTIAL POLYGONS
# 4. ADD POPULATION FROM URBAN ATLAS
# 5. ADD BUILDING ID
#
################################################################################
# INPUT VALUES FOR TESTING CODE
# DATA DIRECTORIES FOR UA AND OSM DATA
osmDir <-  "E:/osm_buildings/"
uaDir <- "C:/Berlin/UA2018/"
cityCode <- "DE001"
cityBound <- "E:/citiesEurope/Cities.shp"
outDir <- "C:/Berlin/buildings.gpkg"
buildingPrep <- function(osm_directory,
ua_directory,
city_code,
city_boundaries,
out_dir)
{
# LOAD PACKAGES AND FUNCTIONS
require(dplyr, quietly = TRUE)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-2[A-Za-z].*\\.R|2.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
# Load city boundary
city_boundary <- boundaryLoader(city_boundaries = city_boundaries,
city_code = city_code,
code_string = "URAU_CO")
# GET DIRECTORIES OF OSM FILES INSIDE UA BOUNDARY
osm_file_list <-
list.files(osm_directory, pattern = city_code, full.names = TRUE) %>%
proximity_checker(city_boundaries = city_boundaries,
city_boundary = city_boundary,
osm_file = .)
# 1. READ UA 2018 DATA
#    -> FILTER FOR RESIDENTIAL AREAS
UAresidential <- UAresLoader(ua_directory)
# 2. READ OSM BUILDING TILE
#    -> CHECK IF OSM LAYER IS INSIDE CITY BOUNDARIES
#    -> UNITE LAYERS IF NECESSARY
for(osm_file in osm_file_list$tile_dir) {
#tmpDir <- paste0(out_dir, strsplit(osm_file, "/")[[1]] %>% last())
osm_file %>%
OSMloader() %>%
# 3. FILTER OSM BUILDINGS FOR INSIDE UA RESIDENTIAL POLYGONS
OSMfilter(ua_residential = UAresidential,
city_boundary = city_boundary) %>%
# 4. ADD POPULATION FROM URBAN ATLAS
#    -> 1. FROM UA POLYGON
#    -> 2. FROM AVERAGE POP / AREA IN TILE (IF NO POP INFO AT POLYGON)
OSMpop() %>%
# 5. ADD BUILDING ID
#    -> IDENTIFIER + NUMBER
OSMbuildID() %>%
st_write(outDir, layer = "osm_buildings", quiet = TRUE, append = TRUE)
}
out_dir %>%
return()
}
buildingPrep(osm_directory = osmDir,
ua_directory = uaDir,
city_code = cityCode,
city_boundaries = cityBound,
out_dir = outDir)
buildingPrep <- function(osm_directory,
ua_directory,
city_code,
city_boundaries,
out_dir)
{
# LOAD PACKAGES AND FUNCTIONS
require(dplyr, quietly = TRUE)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-2[A-Za-z].*\\.R|2.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
# Load city boundary
city_boundary <- boundaryLoader(city_boundaries = city_boundaries,
city_code = city_code,
code_string = "URAU_CO")
# GET DIRECTORIES OF OSM FILES INSIDE UA BOUNDARY
osm_file_list <-
list.files(osm_directory, pattern = city_code, full.names = TRUE) %>%
proximity_checker(city_boundary = city_boundary,
osm_file = .)
# 1. READ UA 2018 DATA
#    -> FILTER FOR RESIDENTIAL AREAS
UAresidential <- UAresLoader(ua_directory)
# 2. READ OSM BUILDING TILE
#    -> CHECK IF OSM LAYER IS INSIDE CITY BOUNDARIES
#    -> UNITE LAYERS IF NECESSARY
for(osm_file in osm_file_list$tile_dir) {
#tmpDir <- paste0(out_dir, strsplit(osm_file, "/")[[1]] %>% last())
osm_file %>%
OSMloader() %>%
# 3. FILTER OSM BUILDINGS FOR INSIDE UA RESIDENTIAL POLYGONS
OSMfilter(ua_residential = UAresidential,
city_boundary = city_boundary) %>%
# 4. ADD POPULATION FROM URBAN ATLAS
#    -> 1. FROM UA POLYGON
#    -> 2. FROM AVERAGE POP / AREA IN TILE (IF NO POP INFO AT POLYGON)
OSMpop() %>%
# 5. ADD BUILDING ID
#    -> IDENTIFIER + NUMBER
OSMbuildID() %>%
st_write(outDir, layer = "osm_buildings", quiet = TRUE, append = TRUE)
}
out_dir %>%
return()
}
buildingPrep(osm_directory = osmDir,
ua_directory = uaDir,
city_code = cityCode,
city_boundaries = cityBound,
out_dir = outDir)
buildingPrep <- function(osm_directory,
ua_directory,
city_code,
city_boundaries,
out_dir)
{
# LOAD PACKAGES AND FUNCTIONS
require(dplyr, quietly = TRUE)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-2[A-Za-z].*\\.R|2_.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
# Load city boundary
city_boundary <- boundaryLoader(city_boundaries = city_boundaries,
city_code = city_code,
code_string = "URAU_CO")
# GET DIRECTORIES OF OSM FILES INSIDE UA BOUNDARY
osm_file_list <-
list.files(osm_directory, pattern = city_code, full.names = TRUE) %>%
proximity_checker(city_boundary = city_boundary,
osm_file = .)
# 1. READ UA 2018 DATA
#    -> FILTER FOR RESIDENTIAL AREAS
UAresidential <- UAresLoader(ua_directory)
# 2. READ OSM BUILDING TILE
#    -> CHECK IF OSM LAYER IS INSIDE CITY BOUNDARIES
#    -> UNITE LAYERS IF NECESSARY
for(osm_file in osm_file_list$tile_dir) {
#tmpDir <- paste0(out_dir, strsplit(osm_file, "/")[[1]] %>% last())
osm_file %>%
OSMloader() %>%
# 3. FILTER OSM BUILDINGS FOR INSIDE UA RESIDENTIAL POLYGONS
OSMfilter(ua_residential = UAresidential,
city_boundary = city_boundary) %>%
# 4. ADD POPULATION FROM URBAN ATLAS
#    -> 1. FROM UA POLYGON
#    -> 2. FROM AVERAGE POP / AREA IN TILE (IF NO POP INFO AT POLYGON)
OSMpop() %>%
# 5. ADD BUILDING ID
#    -> IDENTIFIER + NUMBER
OSMbuildID() %>%
st_write(outDir, layer = "osm_buildings", quiet = TRUE, append = TRUE)
}
out_dir %>%
return()
}
buildingPrep(osm_directory = osmDir,
ua_directory = uaDir,
city_code = cityCode,
city_boundaries = cityBound,
out_dir = outDir)
View(boundaryLoader)
city_boundaries = cityBound
# OVERVIEW:
# 1. READ UA 2018 DATA
# 2. READ OSM BUILDING TILE
# 3. FILTER OSM BUILDINGS FOR INSIDE UA RESIDENTIAL POLYGONS
# 4. ADD POPULATION FROM URBAN ATLAS
# 5. ADD BUILDING ID
#
################################################################################
# INPUT VALUES FOR TESTING CODE
# DATA DIRECTORIES FOR UA AND OSM DATA
osmDir <-  "E:/osm_buildings/"
uaDir <- "C:/Berlin/UA2018/"
cityCode <- "DE001"
cityBound <- "E:/citiesEurope/Cities.shp"
outDir <- "C:/Berlin/buildings.gpkg"
buildingPrep(osm_directory = osmDir,
ua_directory = uaDir,
city_code = cityCode,
city_boundaries = cityBound,
out_dir = outDir)
buildingPrep(osm_directory = osmDir,
ua_directory = uaDir,
city_code = cityCode,
city_boundaries = cityBound,
out_dir = outDir)
?st_cast
be_dir <- "C:/Berlin/buildings.gpkg"
bEntries <- st_read(be_dir, quiet = TRUE)
################################################################################
# OVERVIEW:
# CONVERT TO BUILDING CENTROID
# READ OSM NETWORK
# OUTPUT TO TEMP
################################################################################
net_dir <- "C:/Berlin/network_clean1.gpkg"
gs_dir <- "C:/Berlin/green_space_entries.gpkg"
be_dir <- "C:/Berlin/buildings.gpkg"
# LOAD PACKAGES AND FUNCTIONS
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-4[A-Za-z].*\\.R|2_.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
# READ OSM NETWORK
OSMnetwork <- st_read(network_dir, quiet = TRUE)
gsEntries <- st_read(green_space_dir, quiet = TRUE)
bEntries <- build_entry_dir %>%
st_read(quiet = TRUE) %>%
st_point_on_surface()
network_dir = netDir
################################################################################
# OVERVIEW:
# CONVERT TO BUILDING CENTROID
# READ OSM NETWORK
# OUTPUT TO TEMP
################################################################################
netDir <- "C:/Berlin/network_clean1.gpkg"
gsDir <- "C:/Berlin/green_space_entries.gpkg"
beDir <- "C:/Berlin/buildings.gpkg"
outDir <- "C:/Berlin/popTilesSnapped/"
################################################################################
# OVERVIEW:
# CONVERT TO BUILDING CENTROID
# READ OSM NETWORK
# OUTPUT TO TEMP
################################################################################
netDir <- "C:/Berlin/network_clean1.gpkg"
gsDir <- "C:/Berlin/green_space_entries.gpkg"
beDir <- "C:/Berlin/buildings.gpkg"
outDir <- "C:/Berlin/popTilesSnapped/"
network_dir = netDir
green_space_dir = gsDir
build_entry_dir = beDir
output_dir = outDir
# LOAD PACKAGES AND FUNCTIONS
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
getwd() %>%
paste0("/tool/Module 2 - data preparation/functions/") %>%
list.files(pattern = "2-4[A-Za-z].*\\.R|2_.*\\.R", full.names = TRUE) %>%
for (file in .) source(file)
if (!dir.exists(tmpDir)) dir.create(tmpDir)
if (!dir.exists(output_dir)) dir.create(output_dir)
# READ OSM NETWORK
OSMnetwork <- st_read(network_dir, quiet = TRUE)
gsEntries <- st_read(green_space_dir, quiet = TRUE)
bEntries <- build_entry_dir %>%
st_read(quiet = TRUE) %>%
st_point_on_surface()
cityBound <- "E:/citiesEurope/Cities.shp"
city_code <- "DE001"
city_boundary <- boundaryLoader(city_boundaries = city_boundaries,
city_code = city_code, code_string = "URAU_CO")
cityBound <- "E:/citiesEurope/Cities.shp"
city_boundaries = cityBound
city_boundary <- boundaryLoader(city_boundaries = city_boundaries,
city_code = city_code, code_string = "URAU_CO")
# SNAP AND BLEND BUILDING AND PARK ENTRIES TO NETWORK
snapAndBlend(city_boundary = city_boundary, build_entries = bEntries,
gs_entries = gsEntries, network = OSMnetwork, out_dir = outDir)
snapAndBlend <- function(city_boundary, build_entries, gs_entries, network,
cellsize = 3000, out_dir, crs = 3035)
{
# Load required packages
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
require(sfnetworks, quietly = TRUE)
# require(igraph)
# require(tidygraph)
# Tile boundaries
cityGrid <- city_boundary %>%
st_transform(crs) %>%
st_buffer(1000) %>%
st_make_grid(cellsize = cellsize) %>%
st_as_sf() %>%
st_filter(city_boundary, .pred = st_intersects)
# Iterate through city tiles
for (i in 1:nrow(cityGrid)) {
# User communication
message(paste(i, "of", nrow(cityGrid)))
# Intersect input with grid
# Buildings
build_tile <-
build_entries %>%
st_transform(crs) %>%
st_intersection(cityGrid$x[i]) %>%
st_cast("POINT")
# Green space entries
gs_tile <-
gs_entries %>%
st_transform(crs) %>%
st_intersection(cityGrid$x[i]) %>%
st_cast("POINT")
# Network
gb <- st_buffer(cityGrid$x[i], 100)
net_tile <-
network %>%
st_transform(crs) %>%
st_filter(gb, .predicate = st_intersects) %>%
st_cast("LINESTRING")
# Snap buildings and green space entries to network
if (nrow(build_tile) > 0) {
build_snap <- st_snap_points(points = build_tile, lines = net_tile)
} else build_snap <- NULL
if (nrow(gs_tile) > 0) {
gs_snap <- st_snap_points(points = gs_tile, lines = net_tile)
} else gs_snap <- NULL
# Make sure object is not empty
if (is.null(build_snap)) {nodes <- gs_snap
} else if (is.null(gs_snap)) {nodes <- build_snap}  else {
nodes <- bind_rows(build_snap, gs_snap)}
# Blend buildings and green space entries to network
tile_blend <-
as_sfnetwork(net_tile) %>%
st_network_blend(y = nodes)
# Write results to temp file
tile_blend %>%
activate("edges") %>%
st_as_sf() %>%
st_write(edge_out, layer = "edges", quiet = TRUE, append = TRUE)
tile_blend %>%
activate("nodes") %>%
st_as_sf() %>%
st_write(node_out, layer = "nodes", quiet = TRUE, append = TRUE)
# Clean up
rm(tile_blend, nodes, net_tile, gs_tile, gs_snap,
build_tile, build_snap)
gc()
}
}
outDir <- "C:/Berlin/net_blend/"
output_dir = outDir
if (!dir.exists(output_dir)) dir.create(output_dir)
output_dir
snapAndBlend <- function(city_boundary, build_entries, gs_entries, network,
cellsize = 3000, output_dir, crs = 3035)
{
# Load required packages
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
require(sfnetworks, quietly = TRUE)
# require(igraph)
# require(tidygraph)
# output directories:
edge_out <- paste0(output_dir, "edges.gpkg")
node_out <- paste0(output_dir, "nodes.gpkg")
# Tile boundaries
cityGrid <- city_boundary %>%
st_transform(crs) %>%
st_buffer(1000) %>%
st_make_grid(cellsize = cellsize) %>%
st_as_sf() %>%
st_filter(city_boundary, .pred = st_intersects)
# Iterate through city tiles
for (i in 1:nrow(cityGrid)) {
# User communication
message(paste(i, "of", nrow(cityGrid)))
# Intersect input with grid
# Buildings
build_tile <-
build_entries %>%
st_transform(crs) %>%
st_intersection(cityGrid$x[i]) %>%
st_cast("POINT")
# Green space entries
gs_tile <-
gs_entries %>%
st_transform(crs) %>%
st_intersection(cityGrid$x[i]) %>%
st_cast("POINT")
# Network
gb <- st_buffer(cityGrid$x[i], 100)
net_tile <-
network %>%
st_transform(crs) %>%
st_filter(gb, .predicate = st_intersects) %>%
st_cast("LINESTRING")
# Snap buildings and green space entries to network
if (nrow(build_tile) > 0) {
build_snap <- st_snap_points(points = build_tile, lines = net_tile)
} else build_snap <- NULL
if (nrow(gs_tile) > 0) {
gs_snap <- st_snap_points(points = gs_tile, lines = net_tile)
} else gs_snap <- NULL
# Make sure object is not empty
if (is.null(build_snap)) {nodes <- gs_snap
} else if (is.null(gs_snap)) {nodes <- build_snap}  else {
nodes <- bind_rows(build_snap, gs_snap)}
# Blend buildings and green space entries to network
tile_blend <-
as_sfnetwork(net_tile) %>%
st_network_blend(y = nodes)
# Write results to temp file
tile_blend %>%
activate("edges") %>%
st_as_sf() %>%
st_write(edge_out, layer = "edges", quiet = TRUE, append = TRUE)
tile_blend %>%
activate("nodes") %>%
st_as_sf() %>%
st_write(node_out, layer = "nodes", quiet = TRUE, append = TRUE)
# Clean up
rm(tile_blend, nodes, net_tile, gs_tile, gs_snap,
build_tile, build_snap)
gc()
}
}
# SNAP AND BLEND BUILDING AND PARK ENTRIES TO NETWORK
snapAndBlend(city_boundary = city_boundary, build_entries = bEntries,
gs_entries = gsEntries, network = OSMnetwork, out_dir = outDir)
# SNAP AND BLEND BUILDING AND PARK ENTRIES TO NETWORK
snapAndBlend(city_boundary = city_boundary, build_entries = bEntries,
gs_entries = gsEntries, network = OSMnetwork,
output_dir = outDir)

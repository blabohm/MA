select(code = matches("URAU")) %>%
# filter for city core polygon
filter(substr(code, 1, 5) %in% city_code) %>%
st_cast("POLYGON") %>%
st_buffer(1000) %>%
st_transform(crs)
}
cityBoundary <- boundaryLoader(boundaryFile, cityCode)
boundaryFile%>%
st_read(quiet = TRUE) %>%
select(code = matches("URAU"))
boundaryFile%>%
st_read(quiet = TRUE)
# laod boundary file
boundary_file %>%
st_read(quiet = TRUE) %>%
select(code = matches("URAU_COD")) %>%
# filter for city core polygon
filter(substr(code, 1, 5) %in% city_code) %>%
st_cast("POLYGON") %>%
st_buffer(1000) %>%
st_transform(crs)
boundaryLoader <- function(boundary_file, city_code, crs = 3035)
{
# load packages
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
# laod boundary file
boundary_file %>%
st_read(quiet = TRUE) %>%
select(code = matches("URAU_COD")) %>%
# filter for city core polygon
filter(substr(code, 1, 5) %in% city_code) %>%
st_cast("POLYGON") %>%
st_buffer(1000) %>%
st_transform(crs)
}
cityBoundary <- boundaryLoader(boundaryFile, cityCode)
boundaryLoader <- function(boundary_file, city_code, crs = 3035)
{
# load packages
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
# laod boundary file
boundary_file %>%
st_read(quiet = TRUE) %>%
select(code = matches("URAU_COD")) %>%
# filter for city core polygon
filter(substr(code, 1, 5) %in% city_code) %>%
st_cast("POLYGON", quiet = TRUE) %>%
st_buffer(1000) %>%
st_transform(crs)
}
cityBoundary <- boundaryLoader(boundaryFile, cityCode)
listTiles <- function(network_tile_directory, city_code)
{
# load packages
require(dplyr, quietly = TRUE)
# list files and filter
network_tile_directory %>%
list.files(pattern = city_code, full.names = TRUE) %>%
as_tibble(path = .) %>%
filter(grepl(".gpkg$", path))
}
# LIST NETWORK TILES FOR FUA CODE
netTiles <- listTiles(netTileDir, cityCode)
netTileDir <- "E:/osm_paths/"
# FUA CITY CODE
cityCode <- "DE001"
# LIST NETWORK TILES FOR FUA CODE
netTiles <- listTiles(netTileDir, cityCode)
listTiles <- function(network_tile_directory, city_code)
{
# load packages
require(dplyr, quietly = TRUE)
# list files and filter
network_tile_directory %>%
list.files(pattern = city_code, full.names = TRUE) %>%
tibble(path = .) %>%
filter(grepl(".gpkg$", path))
}
# LIST NETWORK TILES FOR FUA CODE
netTiles <- listTiles(netTileDir, cityCode)
netTiles
combinator <- function(file_list, boundary = NULL)
{
# load packages
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
# make sure output is empty
outSF <- NULL
# iterate through files
for (file in file_list) {
if (!is.null(boundary)) {
isIn <- st_intersects(file, boundary)
} else isIn <- TRUE
if (!is.null(outSF) && isIn) {
outSF <-
st_read(file, quiet = TRUE) %>%
bind_rows(outSF)
} else {
outSF <- st_read(file, quiet = TRUE)
}
}
return(outSF)
}
combinator(netTiles$path[1:16])
combinator <- function(file_list, boundary = NULL)
{
# load packages
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
# make sure output is empty
outSF <- NULL
# iterate through files
for (file in file_list) {
# read file
tmp <- st_read(file, quiet = TRUE)
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, st_intersects(tmp, boundary))
# combine
if (isIn) outSF <- ifelse(is.null(outSF),
st_read(file, quiet = TRUE),
st_read(file, quiet = TRUE) %>%
bind_rows(outSF)) }
rm(tmp)
return(outSF)
}
system.time(combinator(netTiles$path[1:16]))
system.time(combinator(netTiles$path[1:16], cityBoundary))
file <- netTiles$path[1]
# make sure output is empty
outSF <- NULL
# read file
tmp <- file %>%
st_read(quiet = TRUE) %>%
st_transform(crs)
file
st_layers(file)
# check layers
lr <- st_layers(file)
lr
# check layers
lr <- st_layers(file)$name
lr
# check layers
lr <- st_layers(file)$name %>% grep("line", .,
ignore.case = TRUE, value = TRUE)
# check layers
lr <- st_layers(file)$name %>%
grep("line", .,
ignore.case = TRUE, value = TRUE)
lr
lr[1]
# read file
tmp <- file %>%
st_read(quiet = TRUE, layer = lr[1]) %>%
st_transform(crs)
crs = 3035
# read file
tmp <- file %>%
st_read(quiet = TRUE, layer = lr[1]) %>%
st_transform(crs)
tmp
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, st_intersects(tmp, boundary))
boundary <- boundaryFile
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, st_intersects(tmp, boundary))
boundary
boundary <- cityBoundary
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, st_intersects(tmp, boundary))
isIn
st_intersects(tmp, boundary)
tmp
st_intersects(tmp, boundary)
file <- netTiles$path[16]
# check layers
lr <- st_layers(file)$name %>%
grep("line", .,
ignore.case = TRUE, value = TRUE)
# read file
tmp <- file %>%
st_read(quiet = TRUE, layer = lr[1]) %>%
st_transform(crs)
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, st_intersects(tmp, boundary))
isIn
st_intersects(tmp, boundary)
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, any(st_intersects(tmp, boundary)))
isIn
st_intersects(tmp, boundary)
test <- st_intersects(tmp, boundary)
View(test)
test <- unlist(test)
test
file <- netTiles$path[26]
# check layers
lr <- st_layers(file)$name %>%
grep("line", .,
ignore.case = TRUE, value = TRUE)
# read file
tmp <- file %>%
st_read(quiet = TRUE, layer = lr[1]) %>%
st_transform(crs)
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, st_intersects(tmp, boundary))
isIn
st_intersects(tmp, boundary)
test <-  st_intersects(tmp, boundary) %>% unlist()
test
tmp
st_intersects(tmp$geom, boundary)
st_intersects(tmp$geom, boundary) %>% unlist()
file
st_intersects(tmp$geom, boundary, sparse = FALSE)
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE, any(st_intersects(tmp$geom, boundary, sparse = FALSE)))
isIn
combinator <- function(file_list, boundary = NULL, crs = 3035)
{
# load packages
require(dplyr, quietly = TRUE)
require(sf, quietly = TRUE)
# make sure output is empty
outSF <- NULL
# iterate through files
for (file in file_list) {
# check layers
lr <- st_layers(file)$name %>%
grep("line", .,
ignore.case = TRUE, value = TRUE)
# read file
tmp <- file %>%
st_read(quiet = TRUE, layer = lr[1]) %>%
st_transform(crs)
# check if tmp is inside boundary
isIn <- ifelse(is.null(boundary), TRUE,
any(st_intersects(tmp$geom, boundary, sparse = FALSE)))
# combine
if (isIn) outSF <- ifelse(is.null(outSF),
st_read(file, quiet = TRUE),
st_read(file, quiet = TRUE) %>%
bind_rows(outSF)) }
rm(tmp)
return(outSF)
}
# LOAD AND COMBINE NETWORK TILES
network <- combinator(netTiles, cityBoundary)
netTiles
listTiles <- function(network_tile_directory, city_code)
{
# load packages
require(dplyr, quietly = TRUE)
# list files and filter
network_tile_directory %>%
list.files(pattern = city_code, full.names = TRUE) %>%
tibble(path = .) %>%
filter(grepl(".gpkg$", path)) %>%
pull(path)
}
# LIST NETWORK TILES FOR FUA CODE
netTiles <- listTiles(netTileDir, cityCode)
# LOAD AND COMBINE NETWORK TILES
network <- combinator(netTiles, cityBoundary)
# best package in the world:
library(dplyr)
# also needed:
library(readxl)
library(tidyr)
# READ BARK BEETLE DATA
bb_df <-
read.csv("C:/GCG/uwp/q-team/data/bark_beetle_clean.csv")
# GET COUNT OF BARK BEETLE SPECIES PER TREE SPECIES
n_beetles <-
bb_df %>%
mutate(host_species = gsub(" sp.*.*", " ", host_species) %>% trimws(),
host_species = gsub("  ", " ", host_species)) %>%
group_by(host_species) %>%
tally() %>%
mutate(species_name = trimws(host_species)) %>%
filter(grepl(" ", species_name)) %>%
select(species_name, n)
# READ DROUGHT RESISTANCE DATA
drought_df <-
read.delim("C:/GCG/uwp/q-team/data/19141.txt") %>%
#filter(!is.na(TraitID)) %>%
as_tibble() %>%
select(species_name = AccSpeciesName, drought_res = OrigValueStr, Comment) %>%
mutate(species_name = trimws(species_name))
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
pivot_wider(species_name, " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
pivot_wider(species_name, names_sep = " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
pivot_wider(names_sep = " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
pivot_wider(names_from = species_name, names_sep = " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
pivot_wider(names_from = species_name, names_sep = " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
pivot_wider(names_sep = " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
seperate_rows(species_name, " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
separate_rows(species_name, " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
separate_rows(species_name, sep =  " ")
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
separate(species_name, sep =  " ", )
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
separate(species_name, sep =  " ", into = c("family", "species"))
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
separate(species_name, sep =  " ", into = c("family", "species", "subspecies"))
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
n_beetles %>%
select(species_name) %>%
separate(species_name, sep =  " ", into = c("family", "species", "species1",
"species2",  "species3",  "species4"))
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
comp_df <-
n_beetles %>%
select(species_name) %>%
separate(species_name, sep =  " ", into = c("family", "species", "species1",
"species2",  "species3",  "species4"))
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
comp_df_beetles <-
n_beetles %>%
select(species_name) %>%
separate(species_name, sep =  " ", into = c("family", "species", "species1",
"species2",  "species3",  "species4"))
comp_df_drought <-
n_beetles %>%
select(species_name) %>%
distinct()
comp_df_drought <-
drought_df %>%
select(species_name) %>%
distinct()
comp_df_drought
comp_df_drought <-
drought_df %>%
select(species_name) %>%
distinct() %>%
separate(species_name, sep =  " ", into = c("family", "species", "species1",
"species2",  "species3",  "species4"))
View(comp_df_beetles)
View(comp_df_drought)
# CHECK FOR SPELLING ERROR IN SPECIES NAMES
comp_df_beetles <-
n_beetles %>%
select(species_name) %>%
separate(species_name, sep =  " ", into = c("family", "species", "species1",
"species2",  "species3",  "species4")) %>%
mutate(species_name = paste(family, species))
comp_df_drought <-
drought_df %>%
select(species_name) %>%
distinct() %>%
separate(species_name, sep =  " ", into = c("family", "species", "species1",
"species2",  "species3",  "species4")) %>%
mutate(species_name = paste(family, species))
drought_spec <-
comp_df_drought %>%
transmute(species_name = paste(family, species))
bb_spec <-
comp_df_beetles %>%
transmute(species_name = paste(family, species))
bb_spec <-
comp_df_beetles %>%
transmute(species_name = paste(family, species)) %>%
distinct()
drought_spec <-
comp_df_drought %>%
transmute(species_name = paste(family, species)) %>%
distinct()
bb_spec %>%
filter(species_name %in% drought_spec$species_name) %>% nrow()
filter(n_beetles$species_name %in% drought_df$species_name)
n_beetles %>% filter(species_name %in% drought_df$species_name) %>% nrow()
bb_spec <-
comp_df_beetles %>%
transmute(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE)
drought_spec <-
comp_df_drought %>%
transmute(species_name = paste(family, species)) %>%
distinct() %>%
mutate(drought = TRUE)
full_join(drought_spec, bb_spec)
comp_df <- full_join(drought_spec, bb_spec)
View(comp_df)
comp_df %>%
filter(drought & bb)
install.packages("taxise")
install.packages("taxize")
library(taxize)
taxize::synonyms(bb_spec$species_name)
taxize::synonyms_df(bb_spec$species_name)
?syno
?synonyms
taxize::synonyms(bb_spec$species_name, db="itis")
bb_syn <-
taxize::synonyms(bb_spec$species_name, db="itis")
View(bb_syn)
bb_syn[["Abies subalpina"]][["syn_name"]]
bb_spec %>%
filter(substr(species_name, 1, 5) %in% substr(drought_spec$species_name, 1, 5)) %>% nrow()
bb_spec <-
comp_df_beetles %>%
transmute(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE,
spec_nam_short = paste(family, substr(species, 1, 5)))
drought_spec <-
comp_df_drought %>%
transmute(species_name = paste(family, species)) %>%
distinct() %>%
mutate(drought = TRUE,
spec_nam_short = paste(family, substr(species, 1, 5)))
bb_spec <-
comp_df_beetles %>%
transmute(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE,
spec_short = substr(species, 1, 5)
spec_nam_short = paste(family, spec_short))
bb_spec <-
comp_df_beetles %>%
transmute(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE,
spec_short = substr(species, 1, 5),
spec_nam_short = paste(family, spec_short))
bb_spec <-
comp_df_beetles %>%
mutate(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE,
spec_short = substr(species, 1, 5),
spec_nam_short = paste(family, spec_short))
drought_spec <-
comp_df_drought %>%
mutate(species_name = paste(family, species)) %>%
distinct() %>%
mutate(droght = TRUE,
spec_short = substr(species, 1, 5),
spec_nam_short = paste(family, spec_short))
bb_spec <-
comp_df_beetles %>%
mutate(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE,
spec_short = substr(species, 1, 5),
spec_nam_short = paste(family, spec_short))
drought_spec
bb_spec %>%
filter(spec_name_short %in% drought_spec$spec_name_short) %>% nrow()
bb_spec %>%
filter(spec_nam_short %in% drought_spec$spec_nam_short) %>% nrow()
bb_spec %>%
filter(species_name %in% drought_spec$species_name) %>% nrow()
bb_spec <-
comp_df_beetles %>%
mutate(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE,
spec_short = substr(species, 1, 5),
spec_nam_short = paste(family, spec_short)) %>%
select(species_name, spec_short)
bb_spec <-
comp_df_beetles %>%
mutate(species_name = paste(family, species)) %>%
distinct() %>%
mutate(bb = TRUE,
spec_short = substr(species, 1, 5),
spec_nam_short = paste(family, spec_short)) %>%
select(species_name, spec_nam_short)
drought_spec <-
comp_df_drought %>%
mutate(species_name = paste(family, species)) %>%
distinct() %>%
mutate(droght = TRUE,
spec_short = substr(species, 1, 5),
spec_nam_short = paste(family, spec_short)) %>%
select(species_name, spec_nam_short)
comp_df <- full_join(drought_spec, bb_spec)
comp_df <- full_join(drought_spec, bb_spec, by = "spec_nam_short")
View(comp_df)
